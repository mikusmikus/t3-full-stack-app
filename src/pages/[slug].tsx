import Head from "next/head";
import { api } from "~/utils/api";
import { appRouter } from "~/server/api/root";
import { createServerSideHelpers } from "@trpc/react-query/server";
import {
  type GetStaticPaths,
  type GetStaticPropsContext,
  type InferGetStaticPropsType,
} from "next";
import { prisma } from "~/server/db";
import superjson from "superjson";

export default function ProfilePage(
  props: InferGetStaticPropsType<typeof getStaticProps>
) {
  const { data: profile, isLoading } = api.profile.getUserById.useQuery({
    id: props.id,
  });

  if (isLoading) {
    console.log("loading");
  }

  return (
    <>
      <Head>
        <title>Profile</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-h-screen bg-slate-200 p-4 text-black">
        Profile view
        <div>{profile?.username || profile?.firstName}</div>
      </main>
    </>
  );
}

export const getStaticProps = async (
  context: GetStaticPropsContext<{ slug: string }>
) => {
  const ssgHelper = createServerSideHelpers({
    router: appRouter,
    ctx: { prisma, currentUserId: null },
    transformer: superjson,
  });
  const id = context.params?.slug as string;

  if (!id) {
    throw new Error("No id provided");
  }

  await ssgHelper.profile.getUserById.prefetch({ id });

  return {
    props: {
      id,
      trpcState: ssgHelper.dehydrate(),
    },
  };
};

export const getStaticPaths: GetStaticPaths = () => {
  // const posts = await prisma.post.findMany({
  //   select: {
  //     id: true,
  //   },
  // });
  return {
    // paths: posts.map((post) => ({
    //   params: {
    //     id: post.id,
    //   },
    // })),
    paths: [],
    // https://nextjs.org/docs/pages/api-reference/functions/get-static-paths#fallback-blocking
    fallback: "blocking",
  };
};
