import Head from "next/head";
import { SignInButton, UserButton, useUser } from "@clerk/nextjs";
import { type RouterOutputs, api } from "~/utils/api";
import Image from "next/image";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { useState } from "react";
import { TRPCError } from "@trpc/server";
import { TRPCClientError } from "@trpc/client";
import { toast } from "react-hot-toast";

dayjs.extend(relativeTime);

export default function Home() {
  const { data: posts } = api.posts.getAll.useQuery();

  const { user } = useUser();

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-h-screen bg-slate-200 p-4 text-black">
        {user ? (
          <div className="flex items-center justify-end gap-x-6 ">
            <div>Hello, {user.firstName || "User"}</div>
            <UserButton afterSignOutUrl="/" />
          </div>
        ) : (
          <SignInButton />
        )}

        <div className="mx-auto max-w-5xl px-10">
          <PostWizard />
          <ul className="my-10 grid gap-6 md:grid-cols-2">
            {!!posts?.length &&
              posts.map(({ post, author }) => (
                <PostView key={post.id} post={post} author={author} />
              ))}
          </ul>
        </div>
      </main>
    </>
  );
}

type PostWithAuthor = RouterOutputs["posts"]["getAll"][number];

const PostView = ({ post, author }: PostWithAuthor) => {
  return (
    <li className="flex items-start gap-x-4">
      <Image
        placeholder="blur"
        blurDataURL={author?.profilePicture || ""}
        src={author?.profilePicture || ""}
        className="h-10 w-10"
        alt="Profile image"
        width={40}
        height={40}
      />
      <div className="flex flex-col gap-2">
        <h3 className="text-xs">
          @{author.username || author.firstName} |{" "}
          {dayjs(post.createdAt).fromNow()}
        </h3>
        {post.content}
      </div>
    </li>
  );
};

interface UseCreatePostOptions {
  onSuccess?: () => void;
  onError?: (message: string) => void;
}

const useCreatePost = (options: UseCreatePostOptions) => {
  const { onSuccess, onError } = options;
  const ctx = api.useContext();
  const mutation = api.posts.create.useMutation({
    onSuccess: async () => {
      await ctx.posts.getAll.invalidate();
      onSuccess?.();
    },
    onError: (error) => {
      // get error message
      const message = error?.data?.zodError?.fieldErrors?.content;
      onError?.(message && message[0] ? message[0] : "Something went wrong");
    },
  });

  return mutation;
};

const PostWizard = () => {
  const { user } = useUser();
  console.log("user", user);

  const { mutate, isLoading: isPosting } = useCreatePost({
    onSuccess: () => {
      setInputField("");
    },
    onError: (message) => {
      toast.error(message);
    },
  });

  const [inputField, setInputField] = useState("");

  if (!user) {
    return <div>Sign in to create a post</div>;
  }

  return (
    <div>
      <div>Post Wizard</div>
      <div className="flex ">
        <Image
          src={user.profileImageUrl}
          className="h-20 w-20"
          alt="Profile image"
          width={80}
          height={80}
        />
        <form
          className="flex h-20  w-full"
          onSubmit={(e) => {
            e.preventDefault();
            try {
              mutate({ content: inputField });
            } catch (error) {
              console.log("error", error);
            }
          }}
        >
          <textarea
            value={inputField}
            onChange={(e) => setInputField(e.target.value)}
            placeholder="What's on your mind?"
            className="w-full p-2 "
          ></textarea>
          <button
            disabled={isPosting}
            className="rounded-md bg-blue-500 p-2 text-white"
          >
            Post
          </button>
        </form>
      </div>
    </div>
  );
};
